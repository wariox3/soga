<?php

namespace Soga\NominaBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NominaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SsoPilaRepository extends EntityRepository
{
    public function listaDql($strIdentificacion = "", $intAnio = "", $intMes = "") {        
        $em = $this->getEntityManager();
        $dql   = "SELECT p FROM SogaNominaBundle:SsoPila p WHERE p.codigoPilaPk <> 0";
        if($strIdentificacion != "" ) {
            $dql .= " AND p.numeroIdentificacion = '" . $strIdentificacion . "'";
        }        
        if($intAnio != "" ) {
            $dql .= " AND p.anio = " . $intAnio;
        }
        if($intMes != "" ) {
            $dql .= " AND p.mes = '" . $intMes . "'";
        }
        $dql .= " ORDER BY p.codigoPilaPk DESC";
        return $dql;
    }                            
    
    public function dqlDetalle($codigoPeriodoDetalle) {
        $em = $this->getEntityManager();         
        $dql = "SELECT pila FROM SogaNominaBundle:SsoPila pila WHERE pila.codigoPeriodoDetalleFk = " . $codigoPeriodoDetalle;
        $objQuery = $em->createQuery($dql);       
        return $objQuery;                
    }           
    
    public function crearRegistro($codigoPeriodoDetalle) {
        set_time_limit(0);
        $em = $this->getEntityManager();
        $arPeriodoDetalle = new \Soga\NominaBundle\Entity\SsoPeriodoDetalle();
        $arPeriodoDetalle = $em->getRepository('SogaNominaBundle:SsoPeriodoDetalle')->find($codigoPeriodoDetalle);
        $i = 1;
        $em->getRepository('SogaNominaBundle:SsoPeriodoEmpleado')->actualizar($codigoPeriodoDetalle);
        $em->getRepository('SogaNominaBundle:SsoPeriodoEmpleado')->analizar($codigoPeriodoDetalle);
        $arPeriodoEmpleados = new \Soga\NominaBundle\Entity\SsoPeriodoEmpleado();
        $arPeriodoEmpleados = $em->getRepository('SogaNominaBundle:SsoPeriodoEmpleado')->findBy(array('codigoPeriodoDetalleFk' => $codigoPeriodoDetalle));
        foreach ($arPeriodoEmpleados AS $arPeriodoEmpleado) {
            $arEmpleado = new \Soga\NominaBundle\Entity\Empleado();
            $arEmpleado = $em->getRepository('SogaNominaBundle:Empleado')->find($arPeriodoEmpleado->getCodigoEmpleadoFk());
            if(1 == 1 && $i <= 5000) {
            //if($arEmpleado->getCedemple() == '1214719340' || $arEmpleado->getCedemple() == '1045683705') {
            //if($arEmpleado->getCedemple() == '1032434232') {
                $arPeriodosEmpleadoContratos = new \Soga\NominaBundle\Entity\SsoPeriodoEmpleadoContrato();
                $arPeriodosEmpleadoContratos = $em->getRepository('SogaNominaBundle:SsoPeriodoEmpleadoContrato')->findBy(array('codigoPeriodoDetalleFk' => $codigoPeriodoDetalle, 'numeroIdentificacion' => $arPeriodoEmpleado->getNumeroIdentificacion()));
                //$arContratos = new \Soga\NominaBundle\Entity\Contrato();
                //$arContratos = $em->getRepository('SogaNominaBundle:Contrato')->devDqlContratosPeriodoEmpleado($arPeriodoDetalle->getFechaDesde()->format('Y-m-d'), $arPeriodoDetalle->getFechaHasta()->format('Y-m-d'), $arPeriodoEmpleado->getCodigoEmpleadoFk());                
                foreach ($arPeriodosEmpleadoContratos as $arPeriodoEmpleadoContrato) {
                    $i++;
                    $dateFechaDesde =  "";
                    $dateFechaHasta =  "";
                    $strNovedadIngreso = " ";
                    $strNovedadRetiro = " ";
                    $strVariacionPermanenteSalario = " ";
                    if($arPeriodoEmpleadoContrato->getVariacionPermanenteSalario() == "X") {
                        $strVariacionPermanenteSalario = "X";
                    }
                    if($arPeriodoEmpleadoContrato->getIngreso() == "X") {
                        $strNovedadIngreso = "X";
                    }
                    if($arPeriodoEmpleadoContrato->getRetiro() == "X") {
                        $strNovedadRetiro = "X";
                    }                    

                    $floSalario = $arPeriodoEmpleadoContrato->getVrSalario();
                    $intDiasCotizar = $arPeriodoEmpleadoContrato->getDias();
                    $floSuplementario = $arPeriodoEmpleadoContrato->getVrTiempoSuplementario();
                 
                    $arTipoCotizante = $em->getRepository('SogaNominaBundle:SsoTipoCotizante')->find($arEmpleado->getCodigoTipoCotizanteFk());
                    $arSubtipoCotizante = $em->getRepository('SogaNominaBundle:SsoSubtipoCotizante')->find($arEmpleado->getCodigoSubtipoCotizanteFk());                                                                                                                                            
                    
                    $intDiasIncapacidadGeneral = $arPeriodoEmpleadoContrato->getDiasIncapacidadGeneral();
                    $intDiasIncapacidadLaboral = $arPeriodoEmpleadoContrato->getDiasIncapacidadLaboral();
                                        
                    $floIbcIncapacidades = 0;
                    $intDiasIncapacidades = $intDiasIncapacidadGeneral + $intDiasIncapacidadLaboral;
                    $floSalarioMesAnterior = 0;
                    
                    $strIncapacidadGeneral = " ";
                    if($intDiasIncapacidadGeneral > 0) {
                        $strIncapacidadGeneral = "X"; 
                        $floSalarioMesActual = $floSalario + $floSuplementario;   
                        $floSalarioMesAnterior = $this->ibcMesAnterior($arEmpleado->getCedemple(), $arPeriodoDetalle->getMes(), $arPeriodoDetalle->getAnio());
                        $floIbcIncapacidadGeneral = $this->liquidarIncapacidadGeneral($floSalarioMesActual, $floSalarioMesAnterior, $intDiasIncapacidadGeneral);                        
                        $floIbcIncapacidades += $floIbcIncapacidadGeneral;
                    }

                    
                    $strIncapacidadLaboral = " ";
                    if($intDiasIncapacidadLaboral > 0) {
                        $strIncapacidadLaboral = "X";  
                        $floSalarioMesActual = $floSalario + $floSuplementario;   
                        $floSalarioMesAnterior = $this->ibcMesAnterior($arEmpleado->getCedemple(), $arPeriodoDetalle->getMes(), $arPeriodoDetalle->getAnio());
                        $floIbcIncapacidadLaboral = $this->liquidarIncapacidadLaboral($floSalarioMesActual, $floSalarioMesAnterior, $intDiasIncapacidadLaboral);                        
                        $floIbcIncapacidades += $floIbcIncapacidadLaboral;                        
                    }                    
                    
                    $intDiasLicenciaMaternidad = $this->diasLicenciaMaternidad($arPeriodoDetalle, $arEmpleado->getCedemple());
                    $strLicenciaMaternidad = " ";
                    $floIbcLicenciaMaternidad = 0;
                    if($intDiasLicenciaMaternidad > 0) {
                        $strLicenciaMaternidad = "X"; 
                        $floSalarioMesActual = $floSalario + $floSuplementario;
                        $floSalarioMesAnterior = $this->ibcMesAnterior($arEmpleado->getCedemple(), $arPeriodoDetalle->getMes(), $arPeriodoDetalle->getAnio());
                        $floIbcLicenciaMaternidad = $this->liquidarIncapacidadGeneral($floSalarioMesActual, $floSalarioMesAnterior, $intDiasLicenciaMaternidad);                        
                    }                                                            

                    $intDiasVacaciones = $this->diasVacaciones($arPeriodoDetalle, $arEmpleado->getCedemple());
                    $strVacaciones = " ";
                    $floIbcVacaciones = 0;
                    if($intDiasVacaciones > 0) {
                        $strVacaciones = "X";                         
                    }                    

                    $intDiasLicenciaNoRemunerada = 0;
                    $intHorasLicenciaNoRemunerada = 0;
                    $arNominas = new \Soga\NominaBundle\Entity\Nomina();
                    $arNominas = $em->getRepository('SogaNominaBundle:Nomina')->nominasPeriodo($arPeriodoDetalle->getFechaDesde()->format('Y-m-d'), $arPeriodoDetalle->getFechaHasta()->format('Y-m-d'), $arEmpleado->getCedemple());
                    foreach ($arNominas as $arNomina) {                        
                        $arNominaDetalles = new \Soga\NominaBundle\Entity\Denomina();
                        $arNominaDetalles = $em->getRepository('SogaNominaBundle:Denomina')->findBy(array('consecutivo' => $arNomina->getConsecutivo()));                        
                        foreach ($arNominaDetalles as $arNominaDetalle) {                            
                            if($arNominaDetalle->getCodsala() == '94' || $arNominaDetalle->getCodsala() == '95' || $arNominaDetalle->getCodsala() == '92') {                                
                                $intHorasLicenciaNoRemunerada += $arNominaDetalle->getNrohora();
                            }
                        }
                    }
                    $intDiasLicenciaNoRemunerada = round($intHorasLicenciaNoRemunerada / 8);                                                                                                                
                    if(($intDiasCotizar - $intDiasIncapacidades - $intDiasLicenciaMaternidad - $intDiasVacaciones) <= 0 ) {
                        $intDiasLicenciaNoRemunerada = 0;
                    }
                    //A los practicantes no se les marca sln
                    if($arTipoCotizante->getCodigoPila() == '19') {
                        $intDiasLicenciaNoRemunerada = 0;
                    }
                    
                    $floIbcTotal = $floSalario + $floSuplementario;
                    
                    $intDiasCotizarPension = $intDiasCotizar - $intDiasLicenciaNoRemunerada;
                    $intDiasCotizarSalud = $intDiasCotizar - $intDiasLicenciaNoRemunerada;
                    $intDiasCotizarRiesgos = $intDiasCotizar - $intDiasIncapacidades - $intDiasLicenciaNoRemunerada - $intDiasLicenciaMaternidad - $intDiasVacaciones;
                    $intDiasCotizarCaja = $intDiasCotizar - $intDiasIncapacidades - $intDiasLicenciaNoRemunerada - $intDiasLicenciaMaternidad;
                    if($arTipoCotizante->getCodigoPila() == '19') {
                        $intDiasCotizarPension = 0;
                        $intDiasCotizarCaja = 0;
                    }
                    $floIbcBrutoSeguridadSocialPension = (($intDiasCotizarPension-$intDiasIncapacidades) * ($floSalario / 30)) + $floIbcIncapacidades + $floSuplementario;
                    $floIbcBrutoSeguridadSocialSalud = (($intDiasCotizarSalud-$intDiasIncapacidades) * ($floSalario / 30)) + $floIbcIncapacidades + $floSuplementario;                    
                    $floIbcBrutoRiesgos = ($intDiasCotizarRiesgos * ($floSalario / 30)) + $floSuplementario;
                    $floIbcBrutoCaja = ($intDiasCotizarCaja * ($floSalario / 30)) + $floSuplementario;
                    
                    $floIbcPension = $this->redondearIbc($intDiasCotizarPension, $floIbcBrutoSeguridadSocialPension, $floIbcTotal);
                    $floIbcSalud = $this->redondearIbc($intDiasCotizarSalud, $floIbcBrutoSeguridadSocialSalud, $floIbcTotal);
                    $floIbcRiesgos = $this->redondearIbc($intDiasCotizarRiesgos, $floIbcBrutoRiesgos, $floIbcTotal);
                    $floIbcCaja = $this->redondearIbc($intDiasCotizarCaja, $floIbcBrutoCaja, $floIbcTotal);

                    if($intDiasCotizarRiesgos <= 0) {
                        $floIbcRiesgos = 0;
                    }
                    
                    $arEps = new \Soga\NominaBundle\Entity\Eps();
                    $arEps = $em->getRepository('SogaNominaBundle:Eps')->find($arEmpleado->getCodeps());
                    $arPension = new \Soga\NominaBundle\Entity\Pension();
                    $arPension = $em->getRepository('SogaNominaBundle:Pension')->find($arEmpleado->getCodpension());
                    $arCaja = new \Soga\NominaBundle\Entity\Caja();
                    $arCaja = $em->getRepository('SogaNominaBundle:Caja')->find($arEmpleado->getCodigoCajaPk());
                    
                    $strVariacionTransitoriaSalario = ' ';
                    if($floSuplementario > 0) {
                        $strVariacionTransitoriaSalario = 'X';
                    }

                    //Se crea el registro
                    $arPila = new \Soga\NominaBundle\Entity\SsoPila();
                    $arPila->setCodigoContratoFk($arPeriodoEmpleadoContrato->getCodigoContratoFk());
                    $arPila->setCodigoPeriodoFk($arPeriodoDetalle->getCodigoPeriodoFk());
                    $arPila->setCodigoPeriodoDetalleFk($codigoPeriodoDetalle);
                    $arPila->setCodigoSucursalFk($arEmpleado->getCodigoSucursalFk());
                    $arPila->setCodigoEmpleadoFk($arEmpleado->getCodemple());
                    $arPila->setNumeroIdentificacion($arEmpleado->getCedemple());
                    $arPila->setTipoRegistro('02');
                    $arPila->setSecuencia($this->RellenarNr($i, "0", 5, "I"));
                    $arPila->setTipoDocumento($arEmpleado->getTipod());
                    $arPila->setTipo($this->RellenarNr($arTipoCotizante->getCodigoPila(), "0", 2, "I"));
                    $arPila->setSubtipo($this->RellenarNr($arSubtipoCotizante->getCodigoPila(), "0", 2, "I"));
                    $arPila->setAnio($arPeriodoDetalle->getAnio());
                    $arPila->setMes($arPeriodoDetalle->getMes());
                    $arPila->setSalarioMesAnterior($floSalarioMesAnterior);
                    if($arEmpleado->getExtranjeroNoObligadoCotizarPensiones() == 1) {
                        $arPila->setExtranjeroNoObligadoCotizarPensiones('X');
                    } else {
                        $arPila->setExtranjeroNoObligadoCotizarPensiones(' ');
                    }
                    if($arEmpleado->getColombianoResidenteExterior() == 1) {
                        $arPila->setColombianoResidenteExterior('X');
                    } else {
                        $arPila->setColombianoResidenteExterior(' ');
                    }

                    $strCodigoDepartamento = substr($arEmpleado->getCodmuni(), 0, 2);
                    $strCodigoCiudad = substr($arEmpleado->getCodmuni(), 2, 3);
                    $arPila->setCodigoMunicipio($strCodigoCiudad);
                    $arPila->setCodigoDepartamento($strCodigoDepartamento);
                    $arPila->setPrimerNombre($this->RellenarNr($arEmpleado->getNomemple(), " ", 20, "D"));
                    $arPila->setSegundoNombre($this->RellenarNr($arEmpleado->getNomemple1(), " ", 30, "D"));
                    $arPila->setPrimerApellido($this->RellenarNr($arEmpleado->getApemple(), " ", 20, "D"));
                    $arPila->setSegundoApellido($this->RellenarNr($arEmpleado->getApemple1(), " ", 30, "D"));
                    $arPila->setIngreso($strNovedadIngreso);
                    $arPila->setRetiro($strNovedadRetiro);
                    $arPila->setTrasladoDesdeOtraEps(' ');
                    $arPila->setTrasladoAOtraEps(' ');
                    $arPila->setTrasladoDesdeOtraPension(' ');
                    $arPila->setTrasladoAOtraPension(' ');
                    $arPila->setVariacionPermanenteSalario($strVariacionPermanenteSalario);
                    $arPila->setCorrecciones(' ');
                    $arPila->setVariacionTransitoriaSalario($strVariacionTransitoriaSalario);
                    $arPila->setSuspensionTemporalContratoLicenciaServicios(' ');
                    $arPila->setDiasLicenciaNoRemunerada($intDiasLicenciaNoRemunerada);
                    $arPila->setIncapacidadGeneral($strIncapacidadGeneral);
                    $arPila->setDiasIncapacidad($intDiasIncapacidadGeneral);
                    $arPila->setLicenciaMaternidad($strLicenciaMaternidad);
                    $arPila->setDiasLicenciaMaternidad($intDiasLicenciaMaternidad);
                    $arPila->setVacaciones($strVacaciones);
                    $arPila->setAporteVoluntario(' ');
                    $arPila->setVariacionCentrosTrabajo(' ');
                    $arPila->setIncapacidadAccidenteTrabajoEnfermedadProfesional($intDiasIncapacidadLaboral);
                    $arPila->setCodigoEntidadPensionPertenece($this->RellenarNr($arPension->getCodigoInterfacePila(), " ", 6, "D"));
                    if($arEmpleado->getCodpension() == 7) {
                        $arPila->setCodigoEntidadPensionPertenece('      ');
                    }
                    $arPila->setCodigoEntidadPensionTraslada('      ');
                    $arPila->setCodigoEntidadSaludPertenece($this->RellenarNr($arEps->getCodigoInterfacePila(), " ", 6, "D"));
                    $arPila->setCodigoEntidadSaludTraslada('      ');
                    $arPila->setCodigoEntidadCajaPertenece($this->RellenarNr($arCaja->getCodigoInterfacePila(), " ", 6, "D"));
                    $arPila->setDiasCotizadosPension($intDiasCotizarPension);
                    if($arEmpleado->getCodpension() == 7) {
                        $arPila->setDiasCotizadosPension(0);
                    }
                    $arPila->setDiasCotizadosSalud($intDiasCotizarSalud);
                    $arPila->setDiasCotizadosRiesgosProfesionales($intDiasCotizarRiesgos);
                    $arPila->setDiasCotizadosCajaCompensacion($intDiasCotizarCaja);
                    
                    $arPila->setSalarioBasico($this->RellenarNr($floSalario, "0", 9, "I"));
                    $arPila->setSalarioIntegral(' ');
                    $arPila->setTiempoSuplementario($floSuplementario);
                    $arPila->setIbcPension($floIbcPension);
                    $arPila->setIbcSalud($floIbcSalud);
                    $arPila->setIbcRiesgosProfesionales($floIbcRiesgos);
                    $arPila->setIbcCaja($floIbcCaja);                    
                    $douCotizacionPension = 0;
                    $douCotizacionFSPSolidaridad = 0;
                    $douCotizacionFSPSubsistencia = 0;
                    if($arEmpleado->getCodpension() == 7) {
                        $arPila->setIbcPension(0);
                        $arPila->setTarifaAportesPensiones('0.00000');
                        $arPila->setCotizacionObligatoria(0);
                        $arPila->setAportesFondoSolidaridadPensionalSolidaridad('000000000');
                        $arPila->setAportesFondoSolidaridadPensionalSubsistencia('000000000');
                    } else {
                        $douTarifaPension = ($arEmpleado->getPension() + 4)/100;
                        $arPila->setTarifaAportesPensiones($this->RellenarNr($douTarifaPension, 0, 7, "D"));
                        $douCotizacionPension = $this->redondearAporte($floIbcTotal, $floIbcPension, $douTarifaPension, $intDiasCotizarPension);
                        $arPila->setCotizacionObligatoria($douCotizacionPension);
                        $douCotizacionFSPSolidaridad = 0;
                        $douCotizacionFSPSubsistencia = 0;
                        if($floSalario >= (644350 * 4)) {
                            $douCotizacionFSPSolidaridad = round($floIbcPension * 0.005, -2, PHP_ROUND_HALF_DOWN);
                            $douCotizacionFSPSubsistencia = round($floIbcPension * 0.005, -2, PHP_ROUND_HALF_DOWN);
                        }
                        $arPila->setAportesFondoSolidaridadPensionalSolidaridad($douCotizacionFSPSolidaridad);
                        $arPila->setAportesFondoSolidaridadPensionalSubsistencia($douCotizacionFSPSubsistencia);                        
                    }                    
                    $floAporteVoluntarioFondoPensionesObligatorias = 0;
                    $floCotizacionVoluntariaFondoPensionesObligatorias = 0;
                    $floTotalCotizacion = $floAporteVoluntarioFondoPensionesObligatorias + $floCotizacionVoluntariaFondoPensionesObligatorias + $douCotizacionPension;
                    $arPila->setAporteVoluntarioFondoPensionesObligatorias('000000000');
                    $arPila->setCotizacionVoluntarioFondoPensionesObligatorias('000000000');
                    
                    $arPila->setTotalCotizacion($floTotalCotizacion);
                    $arPila->setValorNoRetenidoAportesVoluntarios('000000000');
                    $douTarifaSalud = $em->getRepository('SogaNominaBundle:Centro')->devTarifaSalud($arEmpleado->getCedemple());
                    $douTarifaSalud = $douTarifaSalud /100;
                    if($arTipoCotizante->getCodigoPila() == '19') {
                        $douTarifaSalud = 12.5 /100;
                    }
                    $arPila->setTarifaAportesSalud($this->RellenarNr($douTarifaSalud, "0", 7, "D"));                    
                    $douCotizacionSalud = $this->redondearAporte($floIbcTotal, $floIbcSalud, $douTarifaSalud, $intDiasCotizarSalud);
                    $arPila->setCotizacionObligatoriaSalud($douCotizacionSalud);
                    $arPila->setValorUpcAdicional('000000000');
                    $arPila->setNumeroAutorizacionIncapacidadEnfermedadGeneral('               ');
                    $arPila->setValorIncapacidadEnfermedadGeneral('000000000');
                    $arPila->setNumeroAutorizacionLicenciaMaternidadPaternidad('               ');
                    $arPila->setValorLicenciaMaternidadPaternidad('000000000');
                    $douTarifaRiesgos = $arEmpleado->getNivel()/100;
                    $arPila->setTarifaAportesRiesgosProfesionales($this->RellenarNr($douTarifaRiesgos, 0, 9, "D"));
                    $arPila->setCentroTrabajoCodigoCt($this->RellenarNr($arEmpleado->getCodzona(), "0", 9, "I"));
                    $douCotizacionRiesgos = $this->redondearAporte($floIbcTotal, $floIbcRiesgos, $douTarifaRiesgos, $intDiasCotizarRiesgos);
                    $arPila->setCotizacionObligatoriaRiesgos($douCotizacionRiesgos);
                    $douTarifaCaja = 0.04000;
                    $arPila->setTarifaAportesCCF($this->RellenarNr($douTarifaCaja, "0", 7, "D"));
                    //$douCotizacionCaja = round($floIbc * $douTarifaCaja, -2);
                    $douCotizacionCaja = $this->redondearAporte($floIbcTotal, $floIbcCaja, $douTarifaCaja, $intDiasCotizarCaja);
                    $arPila->setValorAporteCCF($douCotizacionCaja);
                    $arPila->setTarifaAportesSENA('0.00000');
                    $arPila->setValorAportesSENA('000000000');
                    $arPila->setTarifaAportesICBF('0.00000');
                    $arPila->setValorAporteICBF('000000000');
                    $arPila->setTarifaAportesESAP('0.00000');
                    $arPila->setValorAporteESAP('000000000');
                    $arPila->setTarifaAportesMEN('0.00000');
                    $arPila->setValorAporteMEN('000000000');
                    $arPila->setTipoDocumentoResponsableUPC('  ');
                    $arPila->setNumeroIdentificacionResponsableUPCAdicional('                ');
                    $arPila->setCotizanteExoneradoPagoAporteParafiscalesSalud(' ');
                    $arPila->setCodigoAdministradoraRiesgosLaborales('      ');
                    $arPila->setClaseRiesgoAfiliado(' ');
                    $floValorTotalCotizacion = $douCotizacionPension + $douCotizacionFSPSolidaridad + $douCotizacionFSPSubsistencia + $floAporteVoluntarioFondoPensionesObligatorias + $floCotizacionVoluntariaFondoPensionesObligatorias + $douCotizacionSalud + $douCotizacionRiesgos + $douCotizacionCaja;
                    $arPila->setValorTotalCotizacion($floValorTotalCotizacion);
                    if($intDiasCotizarPension > 0 || $arTipoCotizante->getCodigoPila() == '19') {
                        $em->persist($arPila);
                    }
                                                            
                    
                    if($intDiasLicenciaNoRemunerada > 0) {                                                
                        $i++;        
                        $floIbcBrutoSeguridadSocial = (($intDiasLicenciaNoRemunerada) * ($floSalario / 30));                        
                        $floIbcBrutoRiesgos = ($intDiasLicenciaNoRemunerada * ($floSalario / 30));
                        $floIbcBrutoCaja = ($intDiasLicenciaNoRemunerada * ($floSalario / 30));                        
                        
                        $floIbcPension = $this->redondearIbc($intDiasLicenciaNoRemunerada, $floIbcBrutoSeguridadSocial, $floIbcTotal);
                        $floIbcSalud = $this->redondearIbc($intDiasLicenciaNoRemunerada, $floIbcBrutoSeguridadSocial, $floIbcTotal);
                        $floIbcRiesgos = $this->redondearIbc($intDiasLicenciaNoRemunerada, $floIbcBrutoRiesgos, $floIbcTotal);
                        $floIbcCaja = $this->redondearIbc($intDiasLicenciaNoRemunerada, $floIbcBrutoCaja, $floIbcTotal);
                        //Se crea el registro
                        $arPila = new \Soga\NominaBundle\Entity\SsoPila();
                        $arPila->setCodigoPeriodoFk($arPeriodoDetalle->getCodigoPeriodoFk());
                        $arPila->setCodigoContratoFk($arPeriodoEmpleadoContrato->getCodigoContratoFk());
                        $arPila->setCodigoPeriodoDetalleFk($codigoPeriodoDetalle);
                        $arPila->setCodigoSucursalFk($arEmpleado->getCodigoSucursalFk());
                        $arPila->setCodigoEmpleadoFk($arEmpleado->getCodemple());
                        $arPila->setNumeroIdentificacion($arEmpleado->getCedemple());
                        $arPila->setTipoRegistro('02');
                        $arPila->setSecuencia($this->RellenarNr($i, "0", 5, "I"));
                        $arPila->setTipoDocumento($arEmpleado->getTipod());
                        $arPila->setTipo($this->RellenarNr($arTipoCotizante->getCodigoPila(), "0", 2, "I"));
                        $arPila->setSubtipo($this->RellenarNr($arSubtipoCotizante->getCodigoPila(), "0", 2, "I"));
                        $arPila->setAnio($arPeriodoDetalle->getAnio());
                        $arPila->setMes($arPeriodoDetalle->getMes());                        
                        if($arEmpleado->getExtranjeroNoObligadoCotizarPensiones() == 1) {
                            $arPila->setExtranjeroNoObligadoCotizarPensiones('X');
                        } else {
                            $arPila->setExtranjeroNoObligadoCotizarPensiones(' ');
                        }
                        if($arEmpleado->getColombianoResidenteExterior() == 1) {
                            $arPila->setColombianoResidenteExterior('X');
                        } else {
                            $arPila->setColombianoResidenteExterior(' ');
                        }

                        $strCodigoDepartamento = substr($arEmpleado->getCodmuni(), 0, 2);
                        $strCodigoCiudad = substr($arEmpleado->getCodmuni(), 2, 3);
                        $arPila->setCodigoMunicipio($strCodigoCiudad);
                        $arPila->setCodigoDepartamento($strCodigoDepartamento);
                        $arPila->setPrimerNombre($this->RellenarNr($arEmpleado->getNomemple(), " ", 20, "D"));
                        $arPila->setSegundoNombre($this->RellenarNr($arEmpleado->getNomemple1(), " ", 30, "D"));
                        $arPila->setPrimerApellido($this->RellenarNr($arEmpleado->getApemple(), " ", 20, "D"));
                        $arPila->setSegundoApellido($this->RellenarNr($arEmpleado->getApemple1(), " ", 30, "D"));
                        
                        
                        if($intDiasCotizarPension > 0) {
                            $arPila->setIngreso(' ');    
                        } else {
                            $arPila->setIngreso($strNovedadIngreso);    
                        }
                        
                        if($intDiasCotizarPension > 0) {
                            $arPila->setRetiro(' ');
                        } else {
                            $arPila->setRetiro($strNovedadRetiro);
                        }
                        
                        $arPila->setTrasladoDesdeOtraEps(' ');
                        $arPila->setTrasladoAOtraEps(' ');
                        $arPila->setTrasladoDesdeOtraPension(' ');
                        $arPila->setTrasladoAOtraPension(' ');
                        $arPila->setVariacionPermanenteSalario(' ');
                        $arPila->setCorrecciones(' ');
                        $arPila->setVariacionTransitoriaSalario(' ');
                        $arPila->setSuspensionTemporalContratoLicenciaServicios('X');
                        $arPila->setIncapacidadGeneral(' ');
                        $arPila->setLicenciaMaternidad(' ');
                        $arPila->setVacaciones(' ');
                        $arPila->setAporteVoluntario(' ');
                        $arPila->setVariacionCentrosTrabajo(' ');
                        $arPila->setIncapacidadAccidenteTrabajoEnfermedadProfesional(0);
                        $arPila->setCodigoEntidadPensionPertenece($this->RellenarNr($arPension->getCodigoInterfacePila(), " ", 6, "D"));
                        if($arEmpleado->getCodpension() == 7) {
                            $arPila->setCodigoEntidadPensionPertenece('      ');
                        }
                        $arPila->setCodigoEntidadPensionTraslada('      ');
                        $arPila->setCodigoEntidadSaludPertenece($this->RellenarNr($arEps->getCodigoInterfacePila(), " ", 6, "D"));
                        $arPila->setCodigoEntidadSaludTraslada('      ');
                        $arPila->setCodigoEntidadCajaPertenece($this->RellenarNr($arCaja->getCodigoInterfacePila(), " ", 6, "D"));
                        $arPila->setDiasCotizadosPension($intDiasLicenciaNoRemunerada);
                        if($arEmpleado->getCodpension() == 7) {
                            $arPila->setDiasCotizadosPension(0);
                        }
                        $arPila->setDiasCotizadosSalud($intDiasLicenciaNoRemunerada);
                        $arPila->setDiasCotizadosRiesgosProfesionales($intDiasLicenciaNoRemunerada);
                        $arPila->setDiasCotizadosCajaCompensacion($intDiasLicenciaNoRemunerada);

                        $arPila->setSalarioBasico($floSalario);
                        $arPila->setSalarioIntegral(' ');
                        $arPila->setIbcPension($floIbcPension);
                        $arPila->setIbcSalud($floIbcSalud);
                        $arPila->setIbcRiesgosProfesionales($floIbcRiesgos);
                        $arPila->setIbcCaja($floIbcCaja);
                        $douCotizacionPension = 0;
                        if($arEmpleado->getCodpension() == 7) {
                            $arPila->setIbcPension(0);
                            $arPila->setTarifaAportesPensiones('0.00000');
                            $arPila->setCotizacionObligatoria(0);
                            $arPila->setAportesFondoSolidaridadPensionalSolidaridad('000000000');
                            $arPila->setAportesFondoSolidaridadPensionalSubsistencia('000000000');
                        } else {
                            $douTarifaPension = ($arEmpleado->getPension() + 4)/100;
                            $arPila->setTarifaAportesPensiones($this->RellenarNr($douTarifaPension, 0, 7, "D"));
                            $douCotizacionPension = $this->redondearAporte($floSalario, $floIbcPension, $douTarifaPension, $intDiasLicenciaNoRemunerada);
                            $arPila->setCotizacionObligatoria($douCotizacionPension);
                            $douCotizacionFSPSolidaridad = 0;
                            $douCotizacionFSPSubsistencia = 0;
                            if($floSalario >= (644350 * 4)) {
                                $douCotizacionFSPSolidaridad = round($floIbcPension * 0.005, -2, PHP_ROUND_HALF_DOWN);
                                $douCotizacionFSPSubsistencia = round($floIbcPension * 0.005, -2, PHP_ROUND_HALF_DOWN);
                            }                            
                            $arPila->setAportesFondoSolidaridadPensionalSolidaridad($douCotizacionFSPSolidaridad);
                            $arPila->setAportesFondoSolidaridadPensionalSubsistencia($douCotizacionFSPSubsistencia);                            
                        }
                        $floAporteVoluntarioFondoPensionesObligatorias = 0;
                        $floCotizacionVoluntariaFondoPensionesObligatorias = 0;
                        $floTotalCotizacion = $floAporteVoluntarioFondoPensionesObligatorias + $floCotizacionVoluntariaFondoPensionesObligatorias + $douCotizacionPension;                        
                        $arPila->setAporteVoluntarioFondoPensionesObligatorias('000000000');
                        $arPila->setCotizacionVoluntarioFondoPensionesObligatorias('000000000');
                        $arPila->setTotalCotizacion($floTotalCotizacion);
                        $arPila->setValorNoRetenidoAportesVoluntarios('000000000');                        
                        $douTarifaSalud = 0;
                        $arPila->setTarifaAportesSalud('0.00000');                        
                        $douCotizacionSalud = $this->redondearAporte($floSalario, $floIbcSalud, $douTarifaSalud, $intDiasLicenciaNoRemunerada);
                        $arPila->setCotizacionObligatoriaSalud($douCotizacionSalud);
                        $arPila->setValorUpcAdicional('000000000');
                        $arPila->setNumeroAutorizacionIncapacidadEnfermedadGeneral('               ');
                        $arPila->setValorIncapacidadEnfermedadGeneral('000000000');
                        $arPila->setNumeroAutorizacionLicenciaMaternidadPaternidad('               ');
                        $arPila->setValorLicenciaMaternidadPaternidad('000000000');
                        $douTarifaRiesgos = 0;
                        $arPila->setTarifaAportesRiesgosProfesionales('0.0000000');
                        $arPila->setCentroTrabajoCodigoCt($this->RellenarNr($arEmpleado->getCodzona(), "0", 9, "I"));
                        $douCotizacionRiesgos = $this->redondearAporte($floSalario, $floIbcRiesgos, $douTarifaRiesgos, $intDiasLicenciaNoRemunerada);
                        $arPila->setCotizacionObligatoriaRiesgos($douCotizacionRiesgos);
                        $douTarifaCaja = 0;
                        $arPila->setTarifaAportesCCF('0.00000');
                        $douCotizacionCaja = $this->redondearAporte($floSalario, $floIbcCaja, $douTarifaCaja, $intDiasLicenciaNoRemunerada);
                        $arPila->setValorAporteCCF($douCotizacionCaja);
                        $arPila->setTarifaAportesSENA('0.00000');
                        $arPila->setValorAportesSENA('000000000');
                        $arPila->setTarifaAportesICBF('0.00000');
                        $arPila->setValorAporteICBF('000000000');
                        $arPila->setTarifaAportesESAP('0.00000');
                        $arPila->setValorAporteESAP('000000000');
                        $arPila->setTarifaAportesMEN('0.00000');
                        $arPila->setValorAporteMEN('000000000');
                        $arPila->setTipoDocumentoResponsableUPC('  ');
                        $arPila->setNumeroIdentificacionResponsableUPCAdicional('                ');
                        $arPila->setCotizanteExoneradoPagoAporteParafiscalesSalud(' ');
                        $arPila->setCodigoAdministradoraRiesgosLaborales('      ');
                        $arPila->setClaseRiesgoAfiliado(' ');
                        $floValorTotalCotizacion = $douCotizacionPension + $douCotizacionFSPSolidaridad + $douCotizacionFSPSubsistencia + $floAporteVoluntarioFondoPensionesObligatorias + $floCotizacionVoluntariaFondoPensionesObligatorias + $douCotizacionSalud + $douCotizacionRiesgos + $douCotizacionCaja;
                        $arPila->setValorTotalCotizacion($floValorTotalCotizacion);                        
                        $em->persist($arPila);                        
                    }              
      
                }                
            }
        }

        $arPeriodoDetalle->setNumeroEmpleados($i - 1);
        $em->persist($arPeriodoDetalle);
        $em->flush();
        set_time_limit(60);
        return true;
    }

    public static function RellenarNr($Nro, $Str, $NroCr, $strPosicion) {
        $Longitud = strlen($Nro);
        $Nc = $NroCr - $Longitud;
        for ($i = 0; $i < $Nc; $i++) {
            if($strPosicion == "I") {
                $Nro = $Str . $Nro;
            } else {
                $Nro = $Nro . $Str;
            }

        }

        return (string) $Nro;
    }

    public function redondearAporte($floIbcTotal, $floIbc, $floTarifa, $intDias) {
        $floIbcBruto = ($floIbcTotal / 30) * $intDias;        
        $floCotizacionRedondeada = round($floIbc * $floTarifa, -2, PHP_ROUND_HALF_DOWN);        
        $floCotizacionCalculada = $floIbcBruto * $floTarifa;
        $floCotizacionIBC = $floIbc * $floTarifa;
        $floResiduo = fmod($floCotizacionIBC, 100);
        $floCotizacionMinimo = $this->redondearAporteMinimo($floTarifa, $intDias);
        if($floCotizacionRedondeada < $floCotizacionMinimo) {
            if($floResiduo > 50) {
                $floCotizacionRedondeada = intval($floCotizacionIBC/100) * 100 + 100;
            } else {
                if($floCotizacionIBC - $floResiduo >= $floCotizacionCalculada) {
                    $floCotizacionRedondeada = $floCotizacionIBC - $floResiduo;
                } else {
                    $floCotizacionRedondeada = $floCotizacionIBC;
                }
            }

            if(round($floCotizacionRedondeada) >= $floCotizacionCalculada) {
                $floCotizacion = round($floCotizacionRedondeada);
            } else {
                $floCotizacion = ceil($floCotizacionRedondeada);                                
            }
        } else {
            $floCotizacion = $floCotizacionRedondeada;
        }
        return $floCotizacion;
    }

    public function redondearAporteMinimo($floTarifa, $intDias) {
        $floSalario = 644350;
        $douValorDia = $floSalario / 30;
        $floIbcReal = $douValorDia * $intDias;
        if($intDias != 30) {
            $floIbcRedondeo = round($floIbcReal, -3, PHP_ROUND_HALF_DOWN);
            if($floIbcRedondeo > $floIbcReal) {
                $floIbc = ceil($floIbcRedondeo);
            } else {
                $floIbc = ceil($floIbcReal);
            }

        } else {
            $floIbc = $floSalario;
        }
        $douCotizacion = 0;
        $floCotizacionCalculada = $floIbcReal * $floTarifa;
        $floCotizacionIBC = $floIbc * $floTarifa;
        $floResiduo = fmod($floCotizacionIBC, 100);
        if($floResiduo > 50) {
            $floCotizacionRedondeada = intval($floCotizacionIBC/100) * 100 + 100;
        } else {
            if($floCotizacionIBC - $floResiduo >= $floCotizacionCalculada) {
                $floCotizacionRedondeada = $floCotizacionIBC - $floResiduo;
            } else {
                $floCotizacionRedondeada = $floCotizacionIBC;
            }
        }

        if(round($floCotizacionRedondeada) >= $floCotizacionCalculada) {
            $douCotizacion = round($floCotizacionRedondeada);
        } else {
            $douCotizacion = ceil($floCotizacionRedondeada);
        }
        return $douCotizacion;
    }

    public function redondearIbc($intDias, $floIbcBruto, $floSalario) {
        $floIbc = 0;       
        $floIbcRedondedado = round($floIbcBruto, -3, PHP_ROUND_HALF_DOWN);
        $floIbcMinimo = $this->redondearIbcMinimo($intDias);
        $floResiduo = fmod($floIbcBruto, 1000);
        if($floIbcRedondedado < $floIbcMinimo) {
            if($floResiduo > 500) {
                $floIbc = intval($floIbcBruto/1000)*1000+1000;
            } else {
                $floIbc = $floIbcBruto;
            }
            $floIbc = ceil($floIbc);
        } else {
            $floIbc = $floIbcRedondedado;
        }

        return $floIbc;
    }

    public function redondearIbcMinimo ($intDias) {
        $floIbcMinimo = 0;
        $floValorDia = 644350 / 30;
        $floIbcBruto = intval($intDias * $floValorDia);
        return $floIbcBruto;
    }    
    
    public function liquidarIncapacidadGeneral($floSalario, $floSalarioAnterior, $intDias) {
        if($floSalarioAnterior > 0) {
            $floSalario = $floSalarioAnterior;
        }                
        $floValorDia = $floSalario / 30;
        $floValorDiaSalarioMinimo = 644350 / 30;
        $floIbcIncapacidad = 0;       
                
        if($floSalario <= 644350) {
            $floIbcIncapacidad = $intDias * $floValorDia;            
        }
        if($floSalario > 644350 && $floSalario <= 644350 * 1.5) {
            $floIbcIncapacidad = $intDias * $floValorDiaSalarioMinimo;            
        }
        if($floSalario > (644350 * 1.5)) {
            $floIbcIncapacidad = $intDias * $floValorDia; 
            $floIbcIncapacidad = ($floIbcIncapacidad * 66.67)/100;            
        }        
        
        return $floIbcIncapacidad;
    }
    
    public function liquidarIncapacidadLaboral($floSalario, $floSalarioAnterior, $intDias) {
        if($floSalarioAnterior > 0) {
            $floSalario = $floSalarioAnterior;
        }                
        $floValorDia = $floSalario / 30;        
        $floIbcIncapacidad = $intDias * $floValorDia;         
        return $floIbcIncapacidad;
    }    
    
    public function diasLicenciaMaternidad($arPeriodoDetalle, $strNumeroIdentificacion) {
        $em = $this->getEntityManager();
        $intDiasIncapacidad = 0;
        $arIncapacidades = new \Soga\NominaBundle\Entity\Incapacidad();
        $arIncapacidades = $em->getRepository('SogaNominaBundle:Incapacidad')->devDqlLicenciasMaternidadPeriodoEmpleado($arPeriodoDetalle->getFechaDesde()->format('Y-m-d'), $arPeriodoDetalle->getFechaHasta()->format('Y-m-d'), $strNumeroIdentificacion);        
        foreach ($arIncapacidades as $arIncapacidad) {
            $dateFechaDesde =  "";
            $dateFechaHasta =  "";               
            if($arIncapacidad->getFechater() > $arPeriodoDetalle->getFechaHasta() == true) {
                $dateFechaHasta = $arPeriodoDetalle->getFechaHasta();
            } else {
                $dateFechaHasta = $arIncapacidad->getFechater();
            }

            if($arIncapacidad->getFechaini() <  $arPeriodoDetalle->getFechaDesde() == true) {
                $dateFechaDesde = $arPeriodoDetalle->getFechaDesde();
            } else {
                $dateFechaDesde = $arIncapacidad->getFechaini();
            }

            if($dateFechaDesde != "" && $dateFechaHasta != "") {
                $intDias = $dateFechaDesde->diff($dateFechaHasta);
                $intDias = $intDias->format('%a');
                $intDiasIncapacidad += $intDias + 1;
            }  
        }
        if($intDiasIncapacidad > 30) {
            $intDiasIncapacidad = 30;
        }
        return $intDiasIncapacidad;
    }            
    
    public function diasVacaciones($arPeriodoDetalle, $strNumeroIdentificacion) {
        $em = $this->getEntityManager();
        $intDiasVacaciones = 0;
        $arVacacionesProgramadas = new \Soga\NominaBundle\Entity\VacacionProgramada();
        $arVacacionesProgramadas = $em->getRepository('SogaNominaBundle:VacacionProgramada')->devDqlVacaciones($arPeriodoDetalle->getFechaDesde()->format('Y-m-d'), $arPeriodoDetalle->getFechaHasta()->format('Y-m-d'), $strNumeroIdentificacion);        
        foreach ($arVacacionesProgramadas as $arVacacionProgramada) {
            $dateFechaDesde =  "";
            $dateFechaHasta =  "";               
            if($arVacacionProgramada->getDesde() > $arPeriodoDetalle->getFechaHasta() == true) {
                $dateFechaHasta = $arPeriodoDetalle->getFechaHasta();
            } else {
                $dateFechaHasta = $arVacacionProgramada->getHasta();
            }

            if($arVacacionProgramada->getDesde() <  $arPeriodoDetalle->getFechaDesde() == true) {
                $dateFechaDesde = $arPeriodoDetalle->getFechaDesde();
            } else {
                $dateFechaDesde = $arVacacionProgramada->getDesde();
            }

            if($dateFechaDesde != "" && $dateFechaHasta != "") {
                $intDias = $dateFechaDesde->diff($dateFechaHasta);
                $intDias = $intDias->format('%a');
                $intDiasVacaciones += $intDias + 1;
            }  
        }
        
        return $intDiasVacaciones;
    }            
    
    public function ibcMesAnterior($strIdentificacion, $intMes, $intAnio) {
        $em = $this->getEntityManager();
        $floIbcMesAnterior = 0;
        $arSsoPila = new \Soga\NominaBundle\Entity\SsoPila();
        $arSsoPila = $em->getRepository('SogaNominaBundle:SsoPila')->findOneBy(array('numeroIdentificacion' => $strIdentificacion, 'anio' => $intAnio, 'mes' => $intMes - 1));
        if(count($arSsoPila) > 0) {
            $floIbcMesAnterior = $arSsoPila->getSalarioBasico() + $arSsoPila->getTiempoSuplementario();
        }
        return $floIbcMesAnterior;        
    }
}